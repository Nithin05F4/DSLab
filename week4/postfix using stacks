#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100

int st[MAX];
int top = -1;

void push(int st[], int val) {
    if (top >= MAX - 1) {
        printf("Stack overflow!\n");
        exit(EXIT_FAILURE);
    }
    st[++top] = val;
}

int pop(int st[]) {
    if (top < 0) {
        printf("Stack underflow!\n");
        exit(EXIT_FAILURE);
    }
    return st[top--];
}

int evaluatePostfixExp(char exp[]) {
    int i = 0;
    int operand1, operand2, value;

    while (exp[i] != '\0' && exp[i] != '\n') {
        if (isspace(exp[i])) {
            // Skip whitespace
            i++;
            continue;
        }
        if (isdigit(exp[i])) {
            // Convert single digit to integer and push
            push(st, exp[i] - '0');
        } else {
            // Operator: pop two operands and apply operator
            operand2 = pop(st);
            operand1 = pop(st);
            switch (exp[i]) {
                case '+': value = operand1 + operand2; break;
                case '-': value = operand1 - operand2; break;
                case '*': value = operand1 * operand2; break;
                case '/':
                    if (operand2 == 0) {
                        printf("Division by zero error!\n");
                        exit(EXIT_FAILURE);
                    }
                    value = operand1 / operand2;
                    break;
                default:
                    printf("Invalid operator: %c\n", exp[i]);
                    exit(EXIT_FAILURE);
            }
            push(st, value);
        }
        i++;
    }
    return pop(st);
}

int main() {
    int val;
    char exp[100];

    printf("Enter any postfix expression (single-digit operands): ");
    if (!fgets(exp, sizeof(exp), stdin)) {
        printf("Error reading input\n");
        return 1;
    }

    val = evaluatePostfixExp(exp);
    printf("Value of postfix expression = %d\n", val);
    return 0;
}

